package com.example.tung.mobileattendance.utils;


import com.example.tung.mobileattendance.models.Student;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;

import java.util.Date;

public class PdfUtils {
    public static void addMetaData(Document document) {
        document.addTitle("Attendance System");
        document.addSubject("Print presence of Students");
    }

    public static void addTitlePage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Attendance System"));

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Report generated at : " + " " + new Date()));
        addEmptyLine(preface, 3);

        document.add(preface);
       /* // Start a new page
        document.newPage();*/
    }

    /*public static void addContent(Document document, java.util.List<Student> studentList, String courseTitle) throws DocumentException {
        Chapter catPart = new Chapter(new Paragraph(), 1);
        Paragraph subPara = new Paragraph();
        Section subCatPart = catPart.addSection(subPara);
        // add a table
        createTable(document, studentList, courseTitle);
        // now add all this to the document
//        document.add(catPart);
    }*/

    public static void createTable(Document subCatPart, java.util.List<Student> studentList, String courseTitle)
            throws BadElementException {
        PdfPTable table = new PdfPTable(4);
/*
        table.setBorderColor(BaseColor.GRAY);
        table.setPadding(4);
        table.setSpacing(4);
        table.setBorderWidth(1);
*/

        PdfPCell c1 = new PdfPCell(new Phrase("Student Name"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Roll"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Course"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Presence Status"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        table.setHeaderRows(1);

        for (Student student : studentList) {
            table.addCell(student.getStudentName());
            table.addCell(student.getRollNo());
            table.addCell(courseTitle);
            if (student.isOnLeave()) {
                table.addCell("On Leave");
            } else if (student.isAbsent()) {
                table.addCell("Absent");
            } else if (student.isPresent()) {
                table.addCell("Present");
            }
        }
        try {
            subCatPart.add(table);
        } catch (DocumentException e) {
            e.printStackTrace();
        }
    }

    public static void createList(Section subCatPart) {
        List list = new List(true, false, 10);
        list.add(new ListItem("First point"));
        list.add(new ListItem("Second point"));
        list.add(new ListItem("Third point"));
        subCatPart.add(list);
    }

    public static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}
